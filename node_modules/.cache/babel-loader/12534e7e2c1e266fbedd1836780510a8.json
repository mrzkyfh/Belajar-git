{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE, CLEAR_AUTH_ERROR } from './types';\nimport { API, setAuthToken } from '../../config/api'; //Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await API.get('/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //Register User\n\nexport const handleRegister = (email, password, fullName, gender, phone, address, showModalRegister) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password,\n    fullName,\n    gender,\n    phone,\n    address,\n    role: 2\n  });\n\n  try {\n    const res = await API.post('/register', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data.data\n    });\n    dispatch(loadUser());\n    showModalRegister();\n  } catch (err) {\n    dispatch({\n      type: REGISTER_FAIL,\n      payload: err.response.data.error.message\n    });\n  }\n}; //Login User\n\nexport const handleLogin = (email, password, showModalLogin) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await API.post('/login', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data.data\n    }); //ambil data user\n\n    dispatch(loadUser());\n    showModalLogin(); //close modal login\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: err.response.data.error.message\n    });\n  }\n}; //Log out / Clear Profile\n\nexport const handleLogout = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};\nexport const clearError = () => dispatch => {\n  dispatch({\n    type: CLEAR_AUTH_ERROR\n  });\n};","map":{"version":3,"sources":["/home/muhammad/dumbflix-frontend/src/redux/actions/auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_PROFILE","CLEAR_AUTH_ERROR","API","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","handleRegister","email","password","fullName","gender","phone","address","showModalRegister","config","headers","body","JSON","stringify","role","post","response","error","message","handleLogin","showModalLogin","handleLogout","clearError"],"mappings":"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","sourcesContent":["import {\n\tREGISTER_SUCCESS,\n\tREGISTER_FAIL,\n\tUSER_LOADED,\n\tAUTH_ERROR,\n\tLOGIN_SUCCESS,\n\tLOGIN_FAIL,\n\tLOGOUT,\n\tCLEAR_PROFILE,\n\tCLEAR_AUTH_ERROR\n} from './types';\n\nimport { API, setAuthToken } from '../../config/api';\n//Load User\n\nexport const loadUser = () => async (dispatch) => {\n\tif (localStorage.token) {\n\t\tsetAuthToken(localStorage.token);\n\t}\n\n\ttry {\n\t\tconst res = await API.get('/auth');\n\t\tdispatch({\n\t\t\ttype: USER_LOADED,\n\t\t\tpayload: res.data.data\n\t\t});\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: AUTH_ERROR\n\t\t});\n\t}\n};\n\n//Register User\nexport const handleRegister = (\n\temail,\n\tpassword,\n\tfullName,\n\tgender,\n\tphone,\n\taddress,\n\tshowModalRegister\n) => async (dispatch) => {\n\tconst config = {\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t}\n\t};\n\n\tconst body = JSON.stringify({\n\t\temail,\n\t\tpassword,\n\t\tfullName,\n\t\tgender,\n\t\tphone,\n\t\taddress,\n\t\trole: 2\n\t});\n\n\ttry {\n\t\tconst res = await API.post('/register', body, config);\n\t\tdispatch({\n\t\t\ttype: REGISTER_SUCCESS,\n\t\t\tpayload: res.data.data\n\t\t});\n\n\t\tdispatch(loadUser());\n\t\tshowModalRegister();\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: REGISTER_FAIL,\n\t\t\tpayload: err.response.data.error.message\n\t\t});\n\t}\n};\n\n//Login User\nexport const handleLogin = (email, password, showModalLogin) => async (dispatch) => {\n\tconst config = {\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t}\n\t};\n\n\tconst body = JSON.stringify({ email, password });\n\n\ttry {\n\t\tconst res = await API.post('/login', body, config);\n\t\tdispatch({\n\t\t\ttype: LOGIN_SUCCESS,\n\t\t\tpayload: res.data.data\n\t\t});\n\n\t\t//ambil data user\n\t\tdispatch(loadUser());\n\t\tshowModalLogin(); //close modal login\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: LOGIN_FAIL,\n\t\t\tpayload: err.response.data.error.message\n\t\t});\n\t}\n};\n\n//Log out / Clear Profile\nexport const handleLogout = () => (dispatch) => {\n\tdispatch({\n\t\ttype: CLEAR_PROFILE\n\t});\n\tdispatch({\n\t\ttype: LOGOUT\n\t});\n};\n\nexport const clearError = () => (dispatch) => {\n\tdispatch({\n\t\ttype: CLEAR_AUTH_ERROR\n\t});\n};\n"]},"metadata":{},"sourceType":"module"}