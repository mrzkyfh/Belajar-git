{"ast":null,"code":"import { API } from '../../config/api';\nimport moment from 'moment';\nimport { PAYMENT_ERROR, PAYMENT_SUCCESS, GET_TRANSACTION_SUCCESS, GET_TRANSACTION_ERROR, PAYMENT_UPDATE_SUCCES, PAYMENT_UPDATE_FAIL } from './types'; //Get All Films\n\nexport const uploadBukti = (file, idUser, clearForm) => async dispatch => {\n  try {\n    const formData = new FormData();\n    formData.append('startDate', moment());\n    formData.append('dueDate', moment());\n    formData.append('userId', idUser);\n    formData.append('attache', file);\n    formData.append('status', 'Pending');\n    const config = {\n      headers: {\n        'content-type': 'multipart/form-data'\n      }\n    };\n    await API.post('/transaction', formData, config);\n    dispatch({\n      type: PAYMENT_SUCCESS\n    });\n    clearForm();\n  } catch (e) {\n    dispatch({\n      type: PAYMENT_ERROR\n    });\n  }\n};\nexport const getTransaction = () => async dispatch => {\n  try {\n    const res = await API.get('/transaction');\n    dispatch({\n      type: GET_TRANSACTION_SUCCESS,\n      payload: res.data.data\n    });\n  } catch (e) {\n    dispatch({\n      type: GET_TRANSACTION_ERROR\n    });\n  }\n};\nexport const updatePayment = (status, idTranscation, idUser) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    status,\n    idUser\n  });\n\n  try {\n    const res = await API.patch(`/transaction/${idTranscation}`, body, config);\n    dispatch({\n      type: PAYMENT_UPDATE_SUCCES,\n      payload: res.data.data.resultTransaction\n    });\n  } catch (err) {\n    dispatch({\n      type: PAYMENT_UPDATE_FAIL,\n      payload: err.response.data.error.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/muhammad/dumbflix-frontend/src/redux/actions/payment.js"],"names":["API","moment","PAYMENT_ERROR","PAYMENT_SUCCESS","GET_TRANSACTION_SUCCESS","GET_TRANSACTION_ERROR","PAYMENT_UPDATE_SUCCES","PAYMENT_UPDATE_FAIL","uploadBukti","file","idUser","clearForm","dispatch","formData","FormData","append","config","headers","post","type","e","getTransaction","res","get","payload","data","updatePayment","status","idTranscation","body","JSON","stringify","patch","resultTransaction","err","response","error","message"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,SACCC,aADD,EAECC,eAFD,EAGCC,uBAHD,EAICC,qBAJD,EAKCC,qBALD,EAMCC,mBAND,QAOO,SAPP,C,CASA;;AACA,OAAO,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,MAAP,EAAeC,SAAf,KAA6B,MAAOC,QAAP,IAAoB;AAC3E,MAAI;AACH,UAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AAEAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,WAAhB,EAA6Bd,MAAM,EAAnC;AACAY,IAAAA,QAAQ,CAACE,MAAT,CAAgB,SAAhB,EAA2Bd,MAAM,EAAjC;AACAY,IAAAA,QAAQ,CAACE,MAAT,CAAgB,QAAhB,EAA0BL,MAA1B;AACAG,IAAAA,QAAQ,CAACE,MAAT,CAAgB,SAAhB,EAA2BN,IAA3B;AACAI,IAAAA,QAAQ,CAACE,MAAT,CAAgB,QAAhB,EAA0B,SAA1B;AAEA,UAAMC,MAAM,GAAG;AACdC,MAAAA,OAAO,EAAE;AACR,wBAAgB;AADR;AADK,KAAf;AAMA,UAAMjB,GAAG,CAACkB,IAAJ,CAAS,cAAT,EAAyBL,QAAzB,EAAmCG,MAAnC,CAAN;AAEAJ,IAAAA,QAAQ,CAAC;AACRO,MAAAA,IAAI,EAAEhB;AADE,KAAD,CAAR;AAGAQ,IAAAA,SAAS;AACT,GArBD,CAqBE,OAAOS,CAAP,EAAU;AACXR,IAAAA,QAAQ,CAAC;AACRO,MAAAA,IAAI,EAAEjB;AADE,KAAD,CAAR;AAGA;AACD,CA3BM;AA6BP,OAAO,MAAMmB,cAAc,GAAG,MAAM,MAAOT,QAAP,IAAoB;AACvD,MAAI;AACH,UAAMU,GAAG,GAAG,MAAMtB,GAAG,CAACuB,GAAJ,CAAQ,cAAR,CAAlB;AAEAX,IAAAA,QAAQ,CAAC;AACRO,MAAAA,IAAI,EAAEf,uBADE;AAERoB,MAAAA,OAAO,EAAEF,GAAG,CAACG,IAAJ,CAASA;AAFV,KAAD,CAAR;AAIA,GAPD,CAOE,OAAOL,CAAP,EAAU;AACXR,IAAAA,QAAQ,CAAC;AACRO,MAAAA,IAAI,EAAEd;AADE,KAAD,CAAR;AAGA;AACD,CAbM;AAeP,OAAO,MAAMqB,aAAa,GAAG,CAACC,MAAD,EAASC,aAAT,EAAwBlB,MAAxB,KAAmC,MAAOE,QAAP,IAAoB;AACnF,QAAMI,MAAM,GAAG;AACdC,IAAAA,OAAO,EAAE;AACR,sBAAgB;AADR;AADK,GAAf;AAMA,QAAMY,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAC3BJ,IAAAA,MAD2B;AAE3BjB,IAAAA;AAF2B,GAAf,CAAb;;AAKA,MAAI;AACH,UAAMY,GAAG,GAAG,MAAMtB,GAAG,CAACgC,KAAJ,CAAW,gBAAeJ,aAAc,EAAxC,EAA2CC,IAA3C,EAAiDb,MAAjD,CAAlB;AACAJ,IAAAA,QAAQ,CAAC;AACRO,MAAAA,IAAI,EAAEb,qBADE;AAERkB,MAAAA,OAAO,EAAEF,GAAG,CAACG,IAAJ,CAASA,IAAT,CAAcQ;AAFf,KAAD,CAAR;AAIA,GAND,CAME,OAAOC,GAAP,EAAY;AACbtB,IAAAA,QAAQ,CAAC;AACRO,MAAAA,IAAI,EAAEZ,mBADE;AAERiB,MAAAA,OAAO,EAAEU,GAAG,CAACC,QAAJ,CAAaV,IAAb,CAAkBW,KAAlB,CAAwBC;AAFzB,KAAD,CAAR;AAIA;AACD,CAxBM","sourcesContent":["import { API } from '../../config/api';\nimport moment from 'moment';\n\nimport {\n\tPAYMENT_ERROR,\n\tPAYMENT_SUCCESS,\n\tGET_TRANSACTION_SUCCESS,\n\tGET_TRANSACTION_ERROR,\n\tPAYMENT_UPDATE_SUCCES,\n\tPAYMENT_UPDATE_FAIL\n} from './types';\n\n//Get All Films\nexport const uploadBukti = (file, idUser, clearForm) => async (dispatch) => {\n\ttry {\n\t\tconst formData = new FormData();\n\n\t\tformData.append('startDate', moment());\n\t\tformData.append('dueDate', moment());\n\t\tformData.append('userId', idUser);\n\t\tformData.append('attache', file);\n\t\tformData.append('status', 'Pending');\n\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t'content-type': 'multipart/form-data'\n\t\t\t}\n\t\t};\n\n\t\tawait API.post('/transaction', formData, config);\n\n\t\tdispatch({\n\t\t\ttype: PAYMENT_SUCCESS\n\t\t});\n\t\tclearForm();\n\t} catch (e) {\n\t\tdispatch({\n\t\t\ttype: PAYMENT_ERROR\n\t\t});\n\t}\n};\n\nexport const getTransaction = () => async (dispatch) => {\n\ttry {\n\t\tconst res = await API.get('/transaction');\n\n\t\tdispatch({\n\t\t\ttype: GET_TRANSACTION_SUCCESS,\n\t\t\tpayload: res.data.data\n\t\t});\n\t} catch (e) {\n\t\tdispatch({\n\t\t\ttype: GET_TRANSACTION_ERROR\n\t\t});\n\t}\n};\n\nexport const updatePayment = (status, idTranscation, idUser) => async (dispatch) => {\n\tconst config = {\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t}\n\t};\n\n\tconst body = JSON.stringify({\n\t\tstatus,\n\t\tidUser\n\t});\n\n\ttry {\n\t\tconst res = await API.patch(`/transaction/${idTranscation}`, body, config);\n\t\tdispatch({\n\t\t\ttype: PAYMENT_UPDATE_SUCCES,\n\t\t\tpayload: res.data.data.resultTransaction\n\t\t});\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: PAYMENT_UPDATE_FAIL,\n\t\t\tpayload: err.response.data.error.message\n\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}